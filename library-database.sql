CREATE SCHEMA IF NOT EXISTS library;

CREATE  TABLE library.admins ( 
	admin_id             integer  NOT NULL GENERATED BY DEFAULT AS IDENTITY (INCREMENT BY 1  )   ,
	username             varchar(100)    ,
	pass_hash            varchar(256)    ,
	first_name           varchar(100)    ,
	last_name            varchar(100)    ,
	email                varchar    ,
	phone                varchar(20)    ,
	address              varchar    ,
	registration_date    date    ,
	CONSTRAINT pk_admins PRIMARY KEY ( admin_id ),
	CONSTRAINT unq_email_admins UNIQUE ( email ) ,
	CONSTRAINT unq_username_admins UNIQUE ( username ) 
 );

CREATE  TABLE library.authors ( 
	author_id            integer  NOT NULL GENERATED BY DEFAULT AS IDENTITY (INCREMENT BY 1  )   ,
	first_name           varchar(100)    ,
	last_name            varchar(100)    ,
	birth_date           date    ,
	nationality          varchar(100)    ,
	CONSTRAINT pk_auhtors PRIMARY KEY ( author_id )
 );

CREATE  TABLE library.members ( 
	member_id            integer  NOT NULL GENERATED BY DEFAULT AS IDENTITY (INCREMENT BY 1  )   ,
	first_name           varchar(100)    ,
	last_name            varchar(100)    ,
	email                varchar    ,
	phone                varchar(20)    ,
	address              varchar    ,
	registration_date    date    ,
	CONSTRAINT pk_members PRIMARY KEY ( member_id ),
	CONSTRAINT unq_email_members UNIQUE ( email ) 
 );

CREATE  TABLE library.publishers ( 
	publisher_id         integer  NOT NULL GENERATED BY DEFAULT AS IDENTITY (INCREMENT BY 1  )   ,
	name                 varchar(100)    ,
	address              varchar(255)    ,
	phone                varchar(20)    ,
	website              varchar    ,
	CONSTRAINT pk_publishers PRIMARY KEY ( publisher_id )
 );

CREATE TABLE "library".books (
	book_id int4 GENERATED BY DEFAULT AS IDENTITY( INCREMENT BY 1 MINVALUE 1 MAXVALUE 2147483647 START 1 CACHE 1 NO CYCLE) NOT NULL,
	isbn int8 NULL,
	title varchar(255) NULL,
	publication_year int4 DEFAULT 1900 NULL,
	edition varchar NULL,
	lang varchar(100) NULL,
	description text NULL,
	genre _varchar NULL,
	publisher_id int4 NULL,
	author_id int4 NULL,
	available bool NULL,
	author_full_name text NULL,
	publisher_name varchar NULL,
	registration_timestamp timestamp DEFAULT CURRENT_TIMESTAMP NOT NULL,
	CONSTRAINT check_pub_year CHECK ((publication_year >= 1900)),
	CONSTRAINT pk_books PRIMARY KEY (book_id),
	CONSTRAINT uq_isbn_books UNIQUE (isbn),
	CONSTRAINT fk_authors FOREIGN KEY (author_id) REFERENCES "library".authors(author_id),
	CONSTRAINT fk_publishers FOREIGN KEY (publisher_id) REFERENCES "library".publishers(publisher_id)
);


ALTER TABLE library.books ADD CONSTRAINT check_pub_year CHECK ( publication_year >= 1900 );


CREATE OR REPLACE FUNCTION library.set_author_id_from_name()
RETURNS trigger as $$
BEGIN
    -- Look up the author_id based on the author_name provided
    SELECT author_id INTO NEW.author_id 
    FROM library.authors
    WHERE concat(first_name, ' ', last_name) = NEW.author_full_name;
    
    -- Remove the author_name field since we only want to store author_id
    NEW.author_full_name := NULL;
    
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;


CREATE OR REPLACE FUNCTION library.set_publisher_id_from_name()
 RETURNS trigger
 LANGUAGE plpgsql
AS $function$
BEGIN
    -- Look up the author_id based on the author_name provided
    SELECT publisher_id INTO NEW.publisher_id 
    FROM library.publishers
    WHERE name = NEW.publisher_name;
    
    -- Remove the author_name field since we only want to store author_id
    NEW.publisher_name := NULL;
    
    RETURN NEW;
END;
$function$
;


CREATE TRIGGER trg_set_author_id_before_insert BEFORE
INSERT ON library.books FOR EACH ROW EXECUTE FUNCTION library.set_author_id_from_name();

CREATE TRIGGER trg_set_publisher_id_before_insert before
INSERT ON library.books FOR EACH ROW EXECUTE FUNCTION library.set_publisher_id_from_name();


CREATE  TABLE library.loans ( 
	loan_id              integer  NOT NULL GENERATED BY DEFAULT AS IDENTITY (INCREMENT BY 1  )   ,
	book_id              integer    ,
	member_id            integer    ,
	authorized_by        integer    ,
	checkout_date        date    ,
	due_date             date    ,
	return_date          date    ,
	CONSTRAINT pk_loans PRIMARY KEY ( loan_id ),
	CONSTRAINT fk_member_id_loans FOREIGN KEY ( member_id ) REFERENCES library.members( member_id )   ,
	CONSTRAINT fk_authorized_by_loans FOREIGN KEY ( authorized_by ) REFERENCES library.admins( admin_id )   ,
	CONSTRAINT fk_loans_books FOREIGN KEY ( book_id ) REFERENCES library.books( book_id )   
 );

COMMENT ON TABLE library.admins IS 'Authorized people to confirm or reject loans requests.';

COMMENT ON COLUMN library.admins.admin_id IS 'Unique identifier for the administrator.';

COMMENT ON TABLE library.authors IS 'Tracks author details.';

COMMENT ON COLUMN library.authors.author_id IS 'Unique identifier for the author.';

COMMENT ON COLUMN library.authors.first_name IS 'Author’s first name.';

COMMENT ON COLUMN library.authors.last_name IS 'Author’s last name.';

COMMENT ON COLUMN library.authors.birth_date IS 'Date of birth (optional).';

COMMENT ON COLUMN library.authors.nationality IS 'Author’s nationality (optional).';

COMMENT ON TABLE library.members IS 'Stores library member details.';

COMMENT ON COLUMN library.members.member_id IS 'Unique identifier for the member.';

COMMENT ON COLUMN library.members.first_name IS 'Member’s first name.';

COMMENT ON COLUMN library.members.last_name IS 'Member’s last name.';

COMMENT ON COLUMN library.members.email IS 'Unique email address.';

COMMENT ON COLUMN library.members.phone IS 'Contact number.';

COMMENT ON COLUMN library.members.address IS 'Member’s address.';

COMMENT ON COLUMN library.members.registration_date IS 'Date of membership registration.';

COMMENT ON COLUMN library.publishers.publisher_id IS 'Unique identifier for the publisher.';

COMMENT ON COLUMN library.publishers.name IS 'Publisher’s name.';

COMMENT ON COLUMN library.publishers.address IS 'Publisher’s address (optional).';

COMMENT ON COLUMN library.publishers.phone IS 'Contact number (optional).';

COMMENT ON COLUMN library.publishers.website IS 'URL (optional)';

COMMENT ON TABLE library.books IS 'Stores book metadata.';

COMMENT ON COLUMN library.books.book_id IS 'Unique identifier for the book.';

COMMENT ON COLUMN library.books.isbn IS 'ISBN number (unique, nullable if unavailable).';

COMMENT ON COLUMN library.books.title IS 'Title of the book.';

COMMENT ON COLUMN library.books.publication_year IS 'Year of publication. (higher than 1900)';

COMMENT ON COLUMN library.books.edition IS 'Edition number (optional)';

COMMENT ON COLUMN library.books.lang IS 'Language of the book (e.g., "English").';

COMMENT ON COLUMN library.books.description IS 'Brief summary (optional).';

COMMENT ON COLUMN library.books.genre IS 'Genre name (e.g., "Mystery").';

COMMENT ON COLUMN library.books.publisher_id IS 'Links to Publishers table.';

COMMENT ON COLUMN library.books.author_id IS 'Links to Authors table.';

COMMENT ON COLUMN library.books.registration_date IS 'Date of book registration';

COMMENT ON COLUMN library.books.available IS 'Availability to borrow the book.';

COMMENT ON CONSTRAINT fk_authors ON library.books IS 'Foreign key to Authors table';

COMMENT ON CONSTRAINT fk_publishers ON library.books IS 'Foreign key to Publishers table';

COMMENT ON COLUMN library.loans.book_id IS 'Book''s ID.';

COMMENT ON COLUMN library.loans.member_id IS 'Borrower’s ID.';

COMMENT ON COLUMN library.loans.authorized_by IS 'Admin’s ID.';

COMMENT ON COLUMN library.loans.checkout_date IS 'Date the book was borrowed.';

COMMENT ON COLUMN library.loans.due_date IS 'Expected return date.';

COMMENT ON COLUMN library.loans.return_date IS 'Actual return date (nullable if not yet returned).';

